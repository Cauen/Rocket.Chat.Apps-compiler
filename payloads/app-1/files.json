{
  "AppsRocketChatTesterApp.ts": {
    "name": "AppsRocketChatTesterApp.ts",
    "content": "import { IAppAccessors, IConfigurationExtend, ILogger } from '@rocket.chat/apps-engine/definition/accessors';import { App } from '@rocket.chat/apps-engine/definition/App';import { IAppInfo } from '@rocket.chat/apps-engine/definition/metadata';import { PhoneCommand } from './slashcommands/PhoneCommand';export class RocketChatTester extends App {    constructor(info: IAppInfo, logger: ILogger, accessors: IAppAccessors) {        super(info, logger, accessors);    }    public async extendConfiguration(configuration: IConfigurationExtend) {        configuration.slashCommands.provideSlashCommand(new PhoneCommand());    }}",
    "version": 0
  },
  "slashcommands/PhoneCommand.ts": {
    "name": "slashcommands/PhoneCommand.ts",
    "content": "import {    IHttp,    IModify,    IRead,} from '@rocket.chat/apps-engine/definition/accessors';import {    ISlashCommand,    SlashCommandContext,} from '@rocket.chat/apps-engine/definition/slashcommands';export class PhoneCommand implements ISlashCommand {    public command = 'phone';    public i18nParamsExample = '';    public i18nDescription = '';    public providesPreview = false;    public async executor(context: SlashCommandContext, read: IRead, modify: IModify, http: IHttp): Promise<void> {        const [subcommand] = context.getArguments();        if (!subcommand) {            throw new Error('Error!');        }        switch (subcommand) {            case 'text':                this.sendMessage(context, modify, 'Texting!');                break;            case 'call':                this.sendMessage(context, modify, 'Calling!');                break;            default:                throw new Error('Error!');        }    }    private async sendMessage(context: SlashCommandContext, modify: IModify, message: string): Promise<void> {        const messageStructure = modify.getCreator().startMessage();        const sender = context.getSender();        const room = context.getRoom();        messageStructure        .setSender(sender)        .setRoom(room)        .setText(message);        await modify.getCreator().finish(messageStructure);    }}",
    "version": 0
  }
}
